class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int len = nums1.size();
        if (len < m+n || n == 0)
        {
            return;
        }
        
        int j = m+n-1;
        int k = m - 1;
        int l = n - 1;
        
        while( k >= 0 && l >= 0)        //倒序归并 因为没有额外的辅助空间
        {
            nums1[j--] = (nums1[k] > nums2[l]) ?  nums1[k--] : nums2[l--];
        }
        
        if ( k != -1 )
        {
            while ( j >= 0)
            {
                nums1[j--] == nums1[k--];
            }
        }
        else if (l != -1)
        {
            while ( j >= 0)
            {
                nums1[j--] = nums2[l--];
            }
        }
    }
};

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int len = nums1.size();
        int tmp[len];        //使用额外的数组空间
        int i,j,k;
        i=j=k=0;
        while(i<m&&j<n)
        {
            if(nums1[i]<nums2[j])
                tmp[k++]=nums1[i++];
            else
                tmp[k++]=nums2[j++];
        }
        while(i<m)
            tmp[k++]=nums1[i++];
        while(j<n)
            tmp[k++]=nums2[j++];
        for(int i=0;i<len;i++)
            nums1[i]=tmp[i];
    }     
};
