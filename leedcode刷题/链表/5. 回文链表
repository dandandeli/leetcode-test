class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(!head||!head->next)
            return 1;
        ListNode* pre=head;
       vector<int> a;
        while(pre)
        {
        a.push_back(pre->val);
        pre=pre->next;
        }
三种比较方法：
  1.用数组直接和链表节点值比较    
     for(int i=a.size()-1;i>=0;i--)
        {
            if(a[i]==head->val)
            {
                head=head->next;
            }
            else
                return false;
        }
        return true;
    }
};
2.直接用数组比较
 while(i<n)
        {
            if(a[i]==a[n])
            {
                i++;
                n--;
            }
            else
                return false;
        }
3.用stack比较
stack<int> a;
        while(pre)
        {
        a.push(pre->val);
        pre=pre->next;
        }
        int i=0,n=a.size();
       for(i=0;i<n;i++)
       {
         if(head->val==a.top())
         {
             head=head->next;
             a.pop();
         }
           else
               return false;
       }
        return true;
        
另一种方法  反转一半的链表节点指针 令1->2->2->1变成1<-2 2->1 然后比较前一半和后一半链表节点的值
class Solution {
public:
    bool isPalindrome(ListNode* head) 
    {
        if(head==NULL) return true;
       int count=0;
        ListNode* cur=head;
        ListNode* p=head;
        ListNode* q=NULL;
        ListNode* pr;
        while(cur!=NULL)
            
        {
            count++;
            cur=cur->next;
        }
        if(count==3)
        {
            if(head->val==head->next->next->val)
                return true;
            else
                return false;
        }
       if(count==2)
       {
           if(head->next->val==head->val)
               return true;
           else 
               return false;
       }
        if(count==1) return true;   
       // double mid=((x%2)==0)?(x/2):(x/2+0.5);
        int mid =count/2;
        if(count%2==0)
        for(int i=0;i<mid;i++)
        {
           
        
            pr=p->next;
            p->next=q;
            q=p;
            p=pr; 
        
        }
        else
        {
            for(int i=0;i<mid;i++)
    
           
            {
            pr=p->next;
            p->next=q;
            q=p;
            p=pr; 
            }
        p=pr->next;
        
        } 
        while(p!=NULL)
        {
           if( (q->val)!=(p->val))
               return false;
            else
            {
                q=q->next;
                p=p->next;
            }
        }
        return true;
    }
};
