C++中用指针来指向链表中的节点

typedef struct LNode
{
}LNode, *LinkList; 把 struct LNode* 定义成了新结构体类型 LinkList。这个类型是一个结构体的指针

struct Point {
    int x;
    int y;
}p1;      //p1是一个结构体变量  即等价于Point p1;

typedef struct Point {        定义一个结构体类型要用typedef
    int x;
    int y;
}p2;      //p2是一个结构体类型 是struct Point的别名



结构体指针变量*p对结构体的成员变量或者函数操作有两种方式：
p->next; p->val;  指针p所指向的成员
(*p).next; (*p).val;
对于链表操作
LinkList CreateList1(LinkList &L)
{
LNode *s;
L=(LinkList)malloc(sizeof(LNode));
L->next=NULL;创建头节点。头指针始终指向链表的第一个节点，而头结点是带头结点链表中的第一个节点，节点内通常不存储信息。
return L;  //L其实也是一个指针
}
对于链表节点操作
LNode *GetElem(LinkList L, int i)
{
LNode *p;
p=L->NEXT;
return p;
}

建立链表节点时 用new原因 ListNode *p=new ListNode(0) 申请一个指向ListNode空间初始化为0的的指针:
1.直接用ListNode *p，是临时变量 超出作用于范围之后会失效 new分配的只要自己不释放 会在程序结束的时候才收回
2.这样声明的 没有初始化空指针，也没有分配指向内容的内存空间 不能直接对它指向的内容进行操作  例如用p->next 无效;
初始化可以用另一种方式
ListNode a(0);
ListNode *dummy=&a;
int* p;到底有没有在堆空间开辟一个4字节大小的内存空间呢？
声明指针变量时 并没有分配存储内容的内存空间 只是存放了指针本身 要对指针内容进行操作需要先用new或者malloc分配内存空间
没有，这是在栈内定义的一个指针，所以是在栈内开辟了一个4字节大小的内存空间（用来放指针变量了 它指向的地址需要另外分配），
与此对应的，int * p = new int;是在栈上开辟了4个字节放指针，又在堆上开辟了4个字节（准备）放int变量
当需要用到某指针*p的next时  需要先判断*p是否为空  如果不为空可以用其next 如果为空会显示指针越界 出错 即空指针不能指向next
