要求尽量减少调用isBadVersion的次数

int firstBadVersion(int n) {         //二分查找在只有不成立的情况中 找到一个成立的  就是第一个错误的版本
        if(n==1)
        return n;
        int begin=1,end=n;
        while(begin<end)
        {
            int mid=begin+(end-begin)/2;
            if(isBadVersion(mid))  //如果mid是错误版本  则mid之后必定都是错误版本 开始从begin到mid范围查找 把错误版本删选出去 直到只包含一个为止
            {
               end=mid;     //记录mid而不是mid-1 是因为mid可能是第一个错误的版本
            }
            else              //mid不是错误版本  则mid之前都是不错的 
                begin=mid+1;
            
        }
        return end;
       
    }
    
    class Solution {          //采用二分法递归做
public:
    int divide2(int begin,int end)
    {
          int mid=end/2+1;
        if(mid==1) return mid;
        if(isBadVersion(mid))
        {
            if(!isBadVersion(mid-1))
            return mid;
            else
               return divide2(0,mid-1);
        }
        else
        {
            if(isBadVersion(mid+1))
                return mid+1;
            else
                return divide2(mid+1,end);
        }
        
    }
    int firstBadVersion(int n) {
        if(n==1)
            return n;
        return divide2(0,n);
       
    }
};
