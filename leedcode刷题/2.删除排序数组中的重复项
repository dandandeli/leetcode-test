class Solution {                       //vector迭代器和erase用法
public:
    int removeDuplicates(vector<int>& nums) {
    vector<int>::iterator loc;          //迭代器类似指针，指向元素的地址
        for(loc=nums.begin();loc!=nums.end();){        //nums.begin指向第一个元素的地址 end指向最后一个元素之后的地址
            if((loc+1)<nums.end()&&*loc==*(loc+1)){      //先判断加一后是否溢出
                loc=nums.erase(loc);           //erase删除元素并返回下一个元素的迭代器 迭代器要重新赋值，否则删除后变成野指针
                }
            else 
                loc++;
        }
        return nums.size();  //nums中的元素个数
    }
};

class Solution {             //利用i、j双重循环
public:
    int removeDuplicates(vector<int>& nums) {
   int i,j,k=0;
        for(i=0;i<nums.size();i++)
        {
            for(j=k+1;j<nums.size();j++)
            {
                if(nums[i]!=nums[j])
                {nums[i+1]=nums[j];
                    k=j;
                  break;}
            }
            if(j==nums.size())
                break;
        }
        return nums.size()==0?i:i+1;  //不能直接return i+1,因为如果输入时空集 应该返回0而不是1
    }
};

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
   int i=0,j=0;
        if(nums.size()==0)  return 0;  //i是慢指针 指向要比较的元素
        for(j=1;j<nums.size();j++)        //j是快指针，用来查找不同的元素，遇到重复元素直接跳过 下一次从j值开始继续向后查找
        {
                if(nums[i]!=nums[j])
                {nums[i+1]=nums[j];
                    i++;
                  }
            }
        
        return i+1;
    }
};
