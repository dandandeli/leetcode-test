class Solution {
public:
    uint32_t reverseBits(uint32_t n) {
        vector<int> num(32,0);
        int i=0,sum=0;
        while(n>0)
        {
            num[i]=n%2;
            n=n/2;
            i++;
        }
        while(i<32)
        {
            num[i]=0;
            i++;
        }
        for(int j=0;j<32;j++)
        {
            sum=sum<<1;  //有符号整数用左移 因为他连符号位一块移动 否则只能容纳31位
            sum+=num[j];
        }
        return sum;
        
    }
};

class Solution {
public:
    uint32_t reverseBits(uint32_t n) {
        vector<int> num(32,0);
        int i=0;
        unsigned int sum=0;
        while(n>0)
        {
            num[i]=n%2;
            n=n/2;
            i++;
        }
        while(i<32)
        {
            num[i]=0;
            i++;
        }
        for(int j=0;j<32;j++)
        {
            sum=(sum*2)+num[j]; //无符号整数可以用乘以2
           
        }
        return sum;
        
    }
};

class Solution {
public:
    uint32_t reverseBits(uint32_t n) {
        uint32_t m=0;
        int i=32;
        while(i--){
            m<<=1;       //m左移一位
            m += n&1;    //每次取n的最后一位与m相加        
            n>>=1;      //然后n右移1位 更新最后一位
        }
        return m;
    }
};
