class Solution {                //通过画图峰谷 峰顶可知，只要在降价之前立马售出就可以
public:
    int maxProfit(vector<int>& prices) {
        int i,ans=0;
        if(prices.size()==0) return 0;  //要先判断为0的情况 防止后面溢出
        int min=prices[0];
        for(i=1;i<prices.size();i++)
        {
            if(prices[i]>prices[i-1])       //如果持续涨价 一直等
                continue;
            else
            {
                ans+=prices[i-1]-min;    //降价立马售出  然后再买标记最小值
                min=prices[i];
            }
                
        }
        ans+=max(0,prices[prices.size()-1]-min);  //从开头或中间到最后一直涨价的情况，或者从开头一直到最后一直降价的情况
        return ans;
    }
};

class Solution {            //记录每一次连续数字之间的增加值，只要有增加就记录
public:
    int maxProfit(vector<int>& prices) 
    {
        int ans=0;
        for(int i=1;i<prices.size();i++)
        {
            if(prices[i]>prices[i-1])
                ans+=prices[i]-prices[i-1];
        }
        return ans;
    }
};

