1.第一种解法 双套循环遍历
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        vector<int> nums3;
        int k=0,i,j;
        if(nums1.size()==0||nums2.size()==0)   //优先判断
            return nums3;
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        for(i=0;i<nums1.size();i++)               //i遍历数组nums1
        {  
            for(j=k;j<nums2.size();j++)            //j遍历数组nums2
            {   if(nums1[i]<nums2[j])              //nums【i】比较小  继续往后遍历
                break;
                else if(nums1[i]==nums2[j])
                {
                    nums3.push_back(nums1[i]);
                    k=j+1;                           //用k记录上次相等的j位置，下次从j+1开始继续遍历
                    break;
                }
            }
            if(j==nums2.size())
                break;
        }
        return nums3;
    }
};


2.第二种方法在第一种方法的基础上 减少一次循环
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        vector<int> nums3;
        int k=0,i=0,j;
        if(nums1.size()==0||nums2.size()==0)
            return nums3;
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
            for(j=0;j<nums2.size();j++)
            {  
                while(i<nums1.size()&&nums1[i]<nums2[j])
                {
                    i++;
                }
                if(i==nums1.size())
                {
                    break;
                }
                if(nums1[i]==nums2[j])
                {
                    nums3.push_back(nums1[i]);
                    i++;
                    
                }
              
            }
                
        return nums3;
    }
};

2.第三种
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        int n1Size = nums1.size();
        int n2Size = nums2.size();
        int i = 0;
        int j = 0;
        vector<int> intersect;
        while((i < n1Size) && (j < n2Size))       //用while代替双重循环
        {
            if (nums1[i] < nums2[j])
                ++i;
            else if (nums1[i] > nums2[j])
                ++j;
            else
            {
                intersect.push_back(nums1[i]);
                ++i;
                ++j;
            }
        }
        return intersect;
    }
};
