class Solution {        //先写出旋转一位的循环，然后再循环k次
public:
    void rotate(vector<int>& nums, int k) {
        int len=nums.size();
        if(len==0) return;
        k=k%len;
        for(int i=1;i<=k;i++)
        {
            int num=nums[len-1];
            for(int j=len-1;j>0;j--)   //之所以从后往前赋值，是因为后一位的值只与前一位有关，如果从前往后赋值，前面的值会被改变
            {
                nums[j]=nums[j-1]; 
            }
            nums[0]=num;
        }
        
    }
};

class Solution {
public:
    void reverse(vector<int>& nums, int start, int end)  //翻转数据元素
    {
        while(start<end)               //一位一位的进行翻转
        {
            int tmp=nums[start];
            nums[start++]=nums[end];  //注意在交换数据前，不要改变end
            nums[end--]=tmp;
        }
    }
    void rotate(vector<int>& nums, int k) {  
        int len=nums.size();
        if(len==0) return;
        k=k%len;
        reverse(nums,0,len-1);  //先进行整体翻转
        reverse(nums,0,k-1);      //然后对前k个元素进行翻转
        reverse(nums,k,len-1);    //最后对后n-k个元素进行翻转
    }
};


也可以借用临时数组空间存储a[i]=nums[i]
nums[（i+k）%nums.size()]=a[i];
