class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n=nums.size();
        if(n==1) return nums[0];
        map<int,int> tmp;  //利用map中不包含重复的key值
        int count=0;
        int i;
        for(i=0;i<n;i++)
        {
           
            if(tmp.count(nums[i])){//如果存在nums[i]就加1  然后比较数量和n/2
                tmp[nums[i]]++;
                if(tmp[nums[i]]>floor(n/2))  //小于N/2的最大整数
                return nums[i];
            }
                
            else  
                tmp[nums[i]]=1;
        }
        return nums[i-1];
    }
};

假设这个数组中共有n个元素，我们可以把数值不同的元素看做不同的群体成员（一个数字代表一个群体）。
那么我们现在要根据每个群在这个名单中各自的人数，使得在名单中出现人数最多的那个管理群。
我们就先从数组的第一个元素开始，假定它代表的群体的人数是最多的，那么根据数组中出现次数超过一半的数只有一个的特质，
如果我们设置一个计数器，在遍历时遇到不同于这个群体的人时就将计数器-1，遇到同个群体的人时就+1，
只要在计数器归0时就重新假定当前元素代表的群体为人数最多的群体再继续遍历
(此时数据被分为两段，前一段数据中被计数的元素数和numbers except it 数量是相等的，
而后面的data中又满足词频最高的数大于总数一半的情形，有点分治策略的思想)，
那么到了最后，计数器记录的那个群体必定是人最多的那个群体。
这里就使得元素排序是不会造成任何影响的，只关心元素的个数所带来的对于计数器+1或-1的影响

class Solution {  //摩尔投票算法
public:
    int majorityElement(vector<int>& nums) {
        int same=nums[0],sum=0;
        for(int i=0;i<nums.size();i++){
            if(sum==0){//当sum等于0时 same换成当前值
                same=nums[i];
            }
            if(same==nums[i]){
                sum++;
            }else{
                sum--; 
            }
            
        }
        return same;
    }
};
