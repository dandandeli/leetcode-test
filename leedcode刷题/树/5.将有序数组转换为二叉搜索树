class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        if(nums.empty())  return NULL;
        /*TreeNode *head=new TreeNode(0),*left=new TreeNode(0),*right=new TreeNode(0); //访问指针所指向的内容时 要先用new在堆上分配一个内存空间
        if(nums.size()==1)  
        {
            head->val=nums[0];
            head->left=NULL;
            head->right=NULL;
            return head;
        }
        if(nums.size()==2)  
        {      
            head->val=nums[1];
            head->left=left;
            head->right=NULL;
            left->val=nums[0];
            left->left=NULL;
            left->right=NULL;
            return head;
        }
        if(nums.size()==3)
        { 
            head->val=nums[1];
            head->left=left;
            head->right=right;
            left->val=nums[0];
            left->left=NULL;
            left->right=NULL;
            right->val=nums[2];
            right->left=NULL;
            right->right=NULL;

        }*/
        int mid=nums.size()/2;
        TreeNode* root=new TreeNode(0);
        root->val=nums[mid];
        vector<int> a(nums.begin(),nums.begin()+mid);   //vector通过数组初始化，注意是左闭右开区间 通过的迭代器指向范围 nums.begin()就是第一个元素nums[0]；
        vector<int> b(nums.begin()+mid+1,nums.end());
        root->left=sortedArrayToBST(a);
        root->right=sortedArrayToBST(b);
        return root;
    }
};
高效解法 直接传递数组的首尾地址 直到数组元素剩一个位置为止
class Solution {
public:
    
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        int len=nums.size();
        //int mid=len/2;
        if(nums.size()==0)return NULL;
        return Sort(nums,0,len-1);
    }
    private:
    TreeNode * Sort(vector<int>&nums,int begin,int end){
        if(begin>end)return NULL;
        if(begin==end)return new TreeNode(nums[begin]); //直接初始化节点值 左右指针默认为NULL
        int mid=(end-begin)/2+begin;
        TreeNode * root=new TreeNode(nums[mid]);
        root->left=Sort(nums,begin,mid-1);
        root->right=Sort(nums,mid+1,end);
        return root;
    }
};
