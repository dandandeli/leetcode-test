除了保证每个节点的左节点小于中值小于右节点  还需要保证整棵树和各个子树的左子树所有值小于根节点值 右子树所有值大于根节点值

class Solution {
public:
    void Midorder(TreeNode *root,vector<int>& a)  //中序遍历二叉树 并将个各节点存到数组中
    {
        if(root){
          Midorder(root->left,a);
          a.push_back(root->val);
          Midorder(root->right,a);
        }    
    }
    bool isValidBST(TreeNode* root) {
       vector<int> a;
        Midorder(root,a);
        if(a.size()==0)
            return 1;
        for(int i=0;i<a.size()-1;i++)    //只要数组是按照从小到大顺序 就是二叉树
        {
            if(a[i]>=a[i+1])
                return false;
        }
        return true;
        
    }
};

class Solution {  //直接用递归做  需要考虑左子树的右节点可能大于根节点  右子树的左节点可能会小于根节点
public:
    bool isValidBST(TreeNode* root) {
        return helper(root,NULL,NULL);//初始为null
    }
    //返回该结点是否在指定区间内。
    bool helper(TreeNode *node, TreeNode *min, TreeNode *max){//设置最小值  最大值  保证每个节点值在最小值和最大值区间内
        if(!node) return true;
        if((min && node->val <= min->val) || (max && node->val >= max->val)) return false;
        //左子节点的值不能比当前结点的值大，右节点的值不能不当前结点小。
        return helper(node->left, min, node) && helper(node->right, node, max);  更新左右子树的根节点 左子树更新最大值 右子树更新最小值
    }
};
