埃拉托斯特尼筛法：
要得到自然数n以内的全部素数，必须把不大于根号n的所有素数的倍数（素数的倍数要小于等于n）剔除，剩下的就是素数。
给出要筛数值的范围n，找出以内的素数。
1既不是质数也不是合数，去掉；
先用2去筛，即把2留下，把2的倍数剔除掉；
再用下一个质数，也就是3筛，把3留下，把3的倍数剔除掉；
接下去用下一个质数5筛，把5留下，把5的倍数剔除掉；不断重复下去......。

class Solution {
public:
    int countPrimes(int n) {
        int count=0;
        if(n<2) return 0;  //先声明 0和1的情况 否则下边数组会越界
       vector<int> prime(n,1); //建立素数数组 如果等于1表示是素数 先初始化全为1
        prime[0]=0;
        prime[1]=0;
        
        for(int i=2;i<sqrt(n);i++) //不等于是只求小于n的 不需要判断n
        {
          if(prime[i]){
              for(int j=i*i;j<n;j+=i)
          {
              prime[j]=0;
          }
          }
        }
        for(int k=0;k<n;k++)
        {
            if(prime[k])
                count++;
        }
           return count;
    }
};
